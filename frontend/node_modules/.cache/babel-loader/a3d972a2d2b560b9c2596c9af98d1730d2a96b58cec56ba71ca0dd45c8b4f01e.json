{"ast":null,"code":"const API_URL = \"http://localhost:4000\"; // backend\n\nexport const login = async (usuario, password) => {\n  const res = await fetch(`${API_URL}/api/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      usuario,\n      password\n    })\n  });\n  if (!res.ok) throw new Error(\"Credenciales inv치lidas\");\n  return await res.json(); // { token: \"...\" }\n};\nexport const fetchProtectedData = async token => {\n  const res = await fetch(`${API_URL}/api/protected`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"No autorizado\");\n  return await res.json();\n};\nexport const getUserById = async (id, token) => {\n  const res = await fetch(`${API_URL}/api/user/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) throw new Error(\"No autorizado o usuario no encontrado\");\n  return await res.json();\n};\nexport const requestOtp = async usuario => {\n  const res = await fetch(`${API_URL}/api/request-otp`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      usuario\n    })\n  });\n  if (!res.ok) throw new Error(\"Error al solicitar OTP\");\n  return await res.json();\n};\nexport const verifyOtp = async ({\n  usuario,\n  otp,\n  nuevaPassword\n}) => {\n  const res = await fetch(`${API_URL}/api/verify-otp`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      usuario,\n      otp\n    })\n  });\n  if (!res.ok) throw new Error(\"Error al verificar OTP\");\n  return await res.json();\n};\nexport const changePassword = async ({\n  usuario,\n  otp,\n  nuevaPassword\n}) => {\n  const res = await fetch(`${API_URL}/api/verify-otp`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      usuario,\n      otp,\n      nuevaPassword\n    })\n  });\n  if (!res.ok) throw new Error(\"Error al cambiar contrase침a\");\n  return await res.json(); // { mensaje: \"...\", valido: true (opcional) }\n};","map":{"version":3,"names":["API_URL","login","usuario","password","res","fetch","method","headers","body","JSON","stringify","ok","Error","json","fetchProtectedData","token","Authorization","getUserById","id","requestOtp","verifyOtp","otp","nuevaPassword","changePassword"],"sources":["C:/Users/reale/Desktop/Ataques/jwt-login-node/frontend/src/services/api.js"],"sourcesContent":["const API_URL = \"http://localhost:4000\"; // backend\r\n\r\nexport const login = async (usuario, password) => {\r\n  const res = await fetch(`${API_URL}/api/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ usuario, password }),\r\n  });\r\n  if (!res.ok) throw new Error(\"Credenciales inv치lidas\");\r\n  return await res.json(); // { token: \"...\" }\r\n};\r\n\r\nexport const fetchProtectedData = async (token) => {\r\n  const res = await fetch(`${API_URL}/api/protected`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!res.ok) throw new Error(\"No autorizado\");\r\n  return await res.json();\r\n};\r\n\r\nexport const getUserById = async (id, token) => {\r\n  const res = await fetch(`${API_URL}/api/user/${id}`, {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  });\r\n  if (!res.ok) throw new Error(\"No autorizado o usuario no encontrado\");\r\n  return await res.json();\r\n};\r\n\r\nexport const requestOtp = async (usuario) => {\r\n  const res = await fetch(`${API_URL}/api/request-otp`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ usuario }),\r\n  });\r\n  if (!res.ok) throw new Error(\"Error al solicitar OTP\");\r\n  return await res.json();\r\n};\r\n\r\nexport const verifyOtp = async ({ usuario, otp, nuevaPassword }) => {\r\n  const res = await fetch(`${API_URL}/api/verify-otp`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ usuario, otp }),\r\n  });\r\n  if (!res.ok) throw new Error(\"Error al verificar OTP\");\r\n  return await res.json();\r\n};\r\n\r\nexport const changePassword = async ({ usuario, otp, nuevaPassword }) => {\r\n  const res = await fetch(`${API_URL}/api/verify-otp`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ usuario, otp, nuevaPassword }),\r\n  });\r\n  if (!res.ok) throw new Error(\"Error al cambiar contrase침a\");\r\n  return await res.json(); // { mensaje: \"...\", valido: true (opcional) }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}